name: iOS Build & Test - FINAL

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.1'
        channel: 'stable'
    
    - name: Select Xcode 15.0.1
      run: sudo xcode-select -s /Applications/Xcode_15.0.1.app/Contents/Developer
    
    - name: Disable Flutter analytics
      run: flutter config --no-analytics
    
    # ===== CONFIGURATION FIREBASE COMPL√àTE =====
    - name: Setup Firebase for iOS (Complete Solution)
      run: |
        echo "üî• === FIREBASE SETUP COMPLET ==="
        
        # 1. Cr√©er le fichier GoogleService-Info.plist
        cat > ios/Runner/GoogleService-Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
        	<key>API_KEY</key>
        	<string>AIzaSyBBPZGboyrnmU4RUzQIN-U9TUSjjxoSPLc</string>
        	<key>GCM_SENDER_ID</key>
        	<string>221308581892</string>
        	<key>PLIST_VERSION</key>
        	<string>1</string>
        	<key>BUNDLE_ID</key>
        	<string>com.thomassamp.prescriptionManager</string>
        	<key>PROJECT_ID</key>
        	<string>prescription-manager-6feca</string>
        	<key>STORAGE_BUCKET</key>
        	<string>prescription-manager-6feca.firebasestorage.app</string>
        	<key>IS_ADS_ENABLED</key>
        	<false/>
        	<key>IS_ANALYTICS_ENABLED</key>
        	<false/>
        	<key>IS_APPINVITE_ENABLED</key>
        	<true/>
        	<key>IS_GCM_ENABLED</key>
        	<true/>
        	<key>IS_SIGNIN_ENABLED</key>
        	<true/>
        	<key>GOOGLE_APP_ID</key>
        	<string>1:221308581892:ios:b66094ffcf2b865f641d51</string>
        </dict>
        </plist>
        EOF
        
        # 2. Modifier AppDelegate.swift pour Firebase
        cat > ios/Runner/AppDelegate.swift << 'EOF'
        import Flutter
        import UIKit
        import FirebaseCore

        @main
        @objc class AppDelegate: FlutterAppDelegate {
          override func application(
            _ application: UIApplication,
            didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
          ) -> Bool {
            
            // Configuration Firebase
            if let path = Bundle.main.path(forResource: "GoogleService-Info", ofType: "plist"),
               let options = FirebaseOptions(contentsOfFile: path) {
              FirebaseApp.configure(options: options)
              print("üî• Firebase configured from plist file!")
            } else {
              // Configuration Firebase en dur (fallback)
              let options = FirebaseOptions(
                googleAppID: "1:221308581892:ios:b66094ffcf2b865f641d51",
                gcmSenderID: "221308581892"
              )
              options.apiKey = "AIzaSyBBPZGboyrnmU4RUzQIN-U9TUSjjxoSPLc"
              options.projectID = "prescription-manager-6feca"
              options.storageBucket = "prescription-manager-6feca.firebasestorage.app"
              options.bundleID = "com.thomassamp.prescriptionManager"
              
              FirebaseApp.configure(options: options)
              print("üî• Firebase configured manually!")
            }
            
            GeneratedPluginRegistrant.register(with: self)
            return super.application(application, didFinishLaunchingWithOptions: launchOptions)
          }
        }
        EOF
        
        # 3. Cr√©er le Podfile
        cat > ios/Podfile << 'EOF'
        # Uncomment this line to define a global platform for your project
        platform :ios, '13.0'

        # CocoaPods analytics sends network stats synchronously affecting flutter build latency.
        ENV['COCOAPODS_DISABLE_STATS'] = 'true'

        project 'Runner', {
          'Debug' => :debug,
          'Profile' => :release,
          'Release' => :release,
        }

        def flutter_root
          generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
          unless File.exist?(generated_xcode_build_settings_path)
            raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
          end

          File.foreach(generated_xcode_build_settings_path) do |line|
            matches = line.match(/FLUTTER_ROOT\=(.*)/)
            return matches[1].strip if matches
          end
          raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
        end

        require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

        flutter_ios_podfile_setup

        target 'Runner' do
          use_frameworks!
          use_modular_headers!

          flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
          target 'RunnerTests' do
            inherit! :search_paths
          end
        end

        post_install do |installer|
          installer.pods_project.targets.each do |target|
            flutter_additional_ios_build_settings(target)
            target.build_configurations.each do |config|
              config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
            end
          end
        end
        EOF
        
        # 4. V√©rifications
        echo "‚úÖ GoogleService-Info.plist: $(wc -c < ios/Runner/GoogleService-Info.plist) bytes"
        echo "‚úÖ AppDelegate.swift: $(wc -l < ios/Runner/AppDelegate.swift) lines"
        echo "‚úÖ Podfile: $(wc -l < ios/Podfile) lines"
        echo "üî• Firebase setup complete!"
    
    - name: Update iOS deployment target
      run: |
        sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9]*\.[0-9]*/IPHONEOS_DEPLOYMENT_TARGET = 13.0/g' ios/Runner.xcodeproj/project.pbxproj
    
    # ===== OPTIMISATION BUILD =====
    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          ios/Pods
        key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.yaml') }}-${{ hashFiles('ios/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Generate code with build_runner
      run: dart run build_runner build --delete-conflicting-outputs
    
    # ===== BUILDS =====
    - name: Build iOS for Simulator (Debug)
      run: |
        echo "üöÄ Building for Simulator..."
        flutter build ios --simulator --debug
    
    - name: Test Firebase on Simulator
      run: |
        echo "üî• Testing Firebase initialization..."
        
        # Lance le simulateur
        xcrun simctl boot "iPhone 15" || echo "Simulator already running"
        sleep 10
        
        # Installe l'app
        xcrun simctl install booted build/ios/iphonesimulator/Runner.app
        
        # Logs Firebase sp√©cifiques
        xcrun simctl spawn booted log stream \
          --predicate 'process == "Runner" AND (message CONTAINS "Firebase" OR message CONTAINS "üî•")' \
          --info --debug > firebase_test_logs.txt &
        LOG_PID=$!
        
        # Lance l'app
        echo "üöÄ Launching app..."
        xcrun simctl launch booted com.thomassamp.prescriptionManager
        
        # Attendre Firebase
        echo "‚è≥ Waiting for Firebase initialization..."
        sleep 20
        
        # Arr√™ter logs
        kill $LOG_PID || true
        
        # Afficher r√©sultats
        echo "=== FIREBASE TEST RESULTS ==="
        if grep -q "Firebase configured" firebase_test_logs.txt; then
          echo "‚úÖ Firebase initialization: SUCCESS"
        else
          echo "‚ùå Firebase initialization: FAILED"
        fi
        
        cat firebase_test_logs.txt || echo "No Firebase logs captured"
    
    - name: Build iOS for Device (Release)
      run: |
        echo "üì± Building for Device..."
        flutter build ios --no-codesign --release
    
    - name: Create IPA
      run: |
        cd build/ios/iphoneos
        mkdir -p Payload
        cp -r Runner.app Payload/
        zip -r prescription-manager-ios.ipa Payload/
        
        echo "‚úÖ IPA created: $(ls -lh prescription-manager-ios.ipa | awk '{print $5}')"
    
    # ===== ARTIFACTS =====
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: prescription-manager-ios
        path: build/ios/iphoneos/prescription-manager-ios.ipa
    
    - name: Upload Firebase Test Logs
      uses: actions/upload-artifact@v4
      with:
        name: firebase-test-logs
        path: firebase_test_logs.txt
    
    # ===== R√âSUM√â FINAL =====
    - name: Build Summary
      run: |
        echo "üéâ ===== BUILD TERMIN√â ====="
        echo "‚úÖ Firebase: Configur√© en dur dans AppDelegate"
        echo "‚úÖ Podfile: Cr√©√© automatiquement"
        echo "‚úÖ Simulator: Test√© avec Firebase"
        echo "‚úÖ Device: IPA pr√™t pour installation"