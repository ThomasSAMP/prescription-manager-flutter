name: iOS Build & Test

on:
  push:
    branches: [ main, test-ios-deploy ]
  pull_request:
    branches: [ main, test-ios-deploy ]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.1'
        channel: 'stable'
    
    - name: Select Xcode 15.0.1
      run: sudo xcode-select -s /Applications/Xcode_15.0.1.app/Contents/Developer
    
    - name: Disable Flutter analytics
      run: flutter config --no-analytics
    
    # ===== FIREBASE CONFIG VERIFICATION =====
    - name: Verify Firebase config
      run: |
        echo "=== Verifying Firebase config ==="
        if [ -f ios/Runner/GoogleService-Info.plist ]; then
          echo "✅ Firebase config found!"
          echo "Bundle ID: $(grep -A1 'BUNDLE_ID' ios/Runner/GoogleService-Info.plist | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/')"
          echo "Project ID: $(grep -A1 'PROJECT_ID' ios/Runner/GoogleService-Info.plist | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/')"
          echo "File size: $(wc -c < ios/Runner/GoogleService-Info.plist) bytes"
        else
          echo "❌ Firebase config missing!"
          exit 1
        fi

    - name: Create Firebase config file
      run: |
        echo "=== Creating GoogleService-Info.plist ==="
        
        # Créer le dossier si nécessaire
        mkdir -p ios/Runner
        
        # Créer le fichier avec ton contenu exact
        cat > ios/Runner/GoogleService-Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        	<dict>
            <key>API_KEY</key>
            <string>AIzaSyBBPZGboyrnmU4RUzQIN-U9TUSjjxoSPLc</string>
            <key>GCM_SENDER_ID</key>
            <string>221308581892</string>
            <key>PLIST_VERSION</key>
            <string>1</string>
            <key>BUNDLE_ID</key>
            <string>com.thomassamp.prescriptionManager</string>
            <key>PROJECT_ID</key>
            <string>prescription-manager-6feca</string>
            <key>STORAGE_BUCKET</key>
            <string>prescription-manager-6feca.firebasestorage.app</string>
            <key>IS_ADS_ENABLED</key>
            <false></false>
            <key>IS_ANALYTICS_ENABLED</key>
            <false></false>
            <key>IS_APPINVITE_ENABLED</key>
            <true></true>
            <key>IS_GCM_ENABLED</key>
            <true></true>
            <key>IS_SIGNIN_ENABLED</key>
            <true></true>
            <key>GOOGLE_APP_ID</key>
            <string>1:221308581892:ios:b66094ffcf2b865f641d51</string>
          </dict>
        </plist>
        EOF
        
        # Vérification
        echo "✅ Firebase config created:"
        echo "File size: $(wc -c < ios/Runner/GoogleService-Info.plist) bytes"
        echo "Bundle ID: $(grep -A1 'BUNDLE_ID' ios/Runner/GoogleService-Info.plist | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/')"
        
        # Copier aussi dans Resources pour être sûr
        mkdir -p ios/Runner/Resources
        cp ios/Runner/GoogleService-Info.plist ios/Runner/Resources/
        
        echo "✅ Firebase config ready for build!"
    
    - name: Update iOS deployment target
      run: |
        sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9]*\.[0-9]*/IPHONEOS_DEPLOYMENT_TARGET = 13.0/g' ios/Runner.xcodeproj/project.pbxproj
        if [ -f ios/Podfile ]; then
          sed -i '' "s/platform :ios, '[0-9]*\.[0-9]*'/platform :ios, '13.0'/g" ios/Podfile
        fi
    
    # ===== OPTIMISATION BUILD =====
    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          ios/Pods
        key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.yaml') }}-${{ hashFiles('ios/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Generate code with build_runner
      run: dart run build_runner build --delete-conflicting-outputs
    
    # ===== BUILDS OPTIMISÉS =====
    - name: Build iOS for Simulator (Debug + Logs)
      run: flutter build ios --simulator --debug
    
    - name: Test on iOS Simulator with Firebase
      run: |
        echo "=== Testing Firebase initialization ==="
        
        # Lance le simulateur iPhone 15
        xcrun simctl boot "iPhone 15" || echo "Simulator already running"
        sleep 10
        
        # Installe l'app
        xcrun simctl install booted build/ios/iphonesimulator/Runner.app
        
        # Logs spécifiques Firebase + Flutter
        xcrun simctl spawn booted log stream \
          --predicate 'process == "Runner" AND (message CONTAINS "Firebase" OR message CONTAINS "flutter" OR message CONTAINS "GoogleService")' \
          --info --debug > firebase_logs.txt &
        LOG_PID=$!
        
        # Lance l'app
        echo "🚀 Launching app..."
        xcrun simctl launch booted com.thomassamp.prescriptionManager
        
        # Attendre Firebase init
        echo "⏳ Waiting for Firebase initialization..."
        sleep 30
        
        # Arrêter logs
        kill $LOG_PID || true
        
        # Afficher logs Firebase
        echo "=== FIREBASE LOGS ==="
        cat firebase_logs.txt | grep -i firebase || echo "No Firebase logs found"
        
        # Logs généraux
        xcrun simctl spawn booted log stream \
          --predicate 'process == "Runner"' \
          --info --since '30s ago' > general_logs.txt &
        LOG_PID2=$!
        sleep 15
        kill $LOG_PID2 || true
        
        echo "=== GENERAL LOGS (last 50 lines) ==="
        tail -50 general_logs.txt
    
    - name: Build iOS for Device (Release)
      run: flutter build ios --no-codesign --release
    
    - name: Create optimized IPA
      run: |
        cd build/ios/iphoneos
        mkdir -p Payload
        cp -r Runner.app Payload/
        zip -r app-unsigned.ipa Payload/
        
        echo "✅ IPA created: $(ls -lh app-unsigned.ipa | awk '{print $5}')"
    
    # ===== ARTIFACTS =====
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: ios-app-unsigned
        path: build/ios/iphoneos/app-unsigned.ipa
    
    - name: Upload Firebase Logs
      uses: actions/upload-artifact@v4
      with:
        name: firebase-logs
        path: firebase_logs.txt
    
    - name: Upload General Logs
      uses: actions/upload-artifact@v4
      with:
        name: general-logs
        path: general_logs.txt
    
    # ===== RÉSUMÉ =====
    - name: Final Summary
      run: |
        echo "🎉 ===== BUILD COMPLETE ====="
        echo "✅ Firebase config: VERIFIED"
        echo "✅ Simulator test: COMPLETED"
        echo "✅ Device build: SUCCESS"
        echo "✅ IPA ready for installation"
        echo ""
        echo "📱 Your app with Firebase should now work perfectly!"